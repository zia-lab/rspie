#!/usr/bin/env python3

# Code generated by rspie.nb: Dipole Radiation numpy Function Generator

import numpy as np

def Edipx(x, xd, y, yd, z, zd, thetadip, phidip, omega):
    '''
    x-component of the electric field at position (x, y, z) of an electric
     dipole with frequency omega and located at position (xd, yd, zd) including
     near-field components.
    '''
    fieldvalue = (( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z
     + -1 * zd ) )**( 2 ) ) ) )**( -5/2 ) * ( -1 * ( x + -1 * xd ) * ( z + -1
     * zd ) * np.cos( thetadip ) * ( ( -3 + ( ( x )**( 2 ) * ( omega )**( 2
     ) + ( -2 * x * xd * ( omega )**( 2 ) + ( ( xd )**( 2 ) * ( omega )**( 2
     ) + ( ( y )**( 2 ) * ( omega )**( 2 ) + ( -2 * y * yd * ( omega )**( 2
     ) + ( ( yd )**( 2 ) * ( omega )**( 2 ) + ( ( z )**( 2 ) * ( omega )**(
     2 ) + ( -2 * z * zd * ( omega )**( 2 ) + ( zd )**( 2 ) * ( omega )**( 2
     ) ) ) ) ) ) ) ) ) ) * np.cos( ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y
     + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega
     ) + -3 * ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 )
     + ( ( z + -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega * np.sin( ( ( ( ( x
     + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd )
     )**( 2 ) ) ) )**( 1/2 ) * omega ) ) + np.sin( thetadip ) * ( -1 * ( x +
     -1 * xd ) * ( y + -1 * yd ) * np.sin( phidip ) * ( ( -3 + ( ( x )**( 2 )
     * ( omega )**( 2 ) + ( -2 * x * xd * ( omega )**( 2 ) + ( ( xd )**( 2 )
     * ( omega )**( 2 ) + ( ( y )**( 2 ) * ( omega )**( 2 ) + ( -2 * y * yd
     * ( omega )**( 2 ) + ( ( yd )**( 2 ) * ( omega )**( 2 ) + ( ( z )**( 2
     ) * ( omega )**( 2 ) + ( -2 * z * zd * ( omega )**( 2 ) + ( zd )**( 2 )
     * ( omega )**( 2 ) ) ) ) ) ) ) ) ) ) * np.cos( ( ( ( ( x + -1 * xd ) )**(
     2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) ) ) )**(
     1/2 ) * omega ) + -3 * ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 *
     yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega * np.sin(
     ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z +
     -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega ) ) + np.cos( phidip ) * ( ( (
     ( y )**( 2 ) + ( -2 * y * yd + ( ( yd )**( 2 ) + ( ( z + -1 * zd ) )**(
     2 ) ) ) ) * ( -1 + ( ( y )**( 2 ) * ( omega )**( 2 ) + ( -2 * y * yd *
     ( omega )**( 2 ) + ( ( yd )**( 2 ) * ( omega )**( 2 ) + ( ( z )**( 2 )
     * ( omega )**( 2 ) + ( -2 * z * zd * ( omega )**( 2 ) + ( zd )**( 2 ) *
     ( omega )**( 2 ) ) ) ) ) ) ) + ( ( x )**( 2 ) * ( 2 + ( ( y )**( 2 ) *
     ( omega )**( 2 ) + ( -2 * y * yd * ( omega )**( 2 ) + ( ( yd )**( 2 ) *
     ( omega )**( 2 ) + ( ( z )**( 2 ) * ( omega )**( 2 ) + ( -2 * z * zd *
     ( omega )**( 2 ) + ( zd )**( 2 ) * ( omega )**( 2 ) ) ) ) ) ) ) + ( -2
     * x * xd * ( 2 + ( ( y )**( 2 ) * ( omega )**( 2 ) + ( -2 * y * yd * (
     omega )**( 2 ) + ( ( yd )**( 2 ) * ( omega )**( 2 ) + ( ( z )**( 2 ) *
     ( omega )**( 2 ) + ( -2 * z * zd * ( omega )**( 2 ) + ( zd )**( 2 ) * (
     omega )**( 2 ) ) ) ) ) ) ) + ( xd )**( 2 ) * ( 2 + ( ( y )**( 2 ) * ( omega
     )**( 2 ) + ( -2 * y * yd * ( omega )**( 2 ) + ( ( yd )**( 2 ) * ( omega
     )**( 2 ) + ( ( z )**( 2 ) * ( omega )**( 2 ) + ( -2 * z * zd * ( omega
     )**( 2 ) + ( zd )**( 2 ) * ( omega )**( 2 ) ) ) ) ) ) ) ) ) ) * np.cos(
     ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z +
     -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega ) + ( ( ( ( x + -1 * xd ) )**(
     2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) ) ) )**(
     1/2 ) * ( 2 * ( x )**( 2 ) + ( -4 * x * xd + ( 2 * ( xd )**( 2 ) + ( -1
     * ( y )**( 2 ) + ( 2 * y * yd + ( -1 * ( yd )**( 2 ) + ( -1 * ( z )**(
     2 ) + ( 2 * z * zd + -1 * ( zd )**( 2 ) ) ) ) ) ) ) ) ) * omega * np.sin(
     ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z +
     -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega ) ) ) ))
    return fieldvalue

def Edipy(x, xd, y, yd, z, zd, thetadip, phidip, omega):
    '''
    y-component of the electric field at position (x, y, z) of an electric
     dipole with frequency omega and located at position (xd, yd, zd) including
     near-field components.
    '''
    fieldvalue = (( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z
     + -1 * zd ) )**( 2 ) ) ) )**( -5/2 ) * ( -1 * ( y + -1 * yd ) * ( z + -1
     * zd ) * np.cos( thetadip ) * ( ( -3 + ( ( x )**( 2 ) * ( omega )**( 2
     ) + ( -2 * x * xd * ( omega )**( 2 ) + ( ( xd )**( 2 ) * ( omega )**( 2
     ) + ( ( y )**( 2 ) * ( omega )**( 2 ) + ( -2 * y * yd * ( omega )**( 2
     ) + ( ( yd )**( 2 ) * ( omega )**( 2 ) + ( ( z )**( 2 ) * ( omega )**(
     2 ) + ( -2 * z * zd * ( omega )**( 2 ) + ( zd )**( 2 ) * ( omega )**( 2
     ) ) ) ) ) ) ) ) ) ) * np.cos( ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y
     + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega
     ) + -3 * ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 )
     + ( ( z + -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega * np.sin( ( ( ( ( x
     + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd )
     )**( 2 ) ) ) )**( 1/2 ) * omega ) ) + np.sin( thetadip ) * ( -1 * ( x +
     -1 * xd ) * ( y + -1 * yd ) * np.cos( phidip ) * ( ( -3 + ( ( x )**( 2 )
     * ( omega )**( 2 ) + ( -2 * x * xd * ( omega )**( 2 ) + ( ( xd )**( 2 )
     * ( omega )**( 2 ) + ( ( y )**( 2 ) * ( omega )**( 2 ) + ( -2 * y * yd
     * ( omega )**( 2 ) + ( ( yd )**( 2 ) * ( omega )**( 2 ) + ( ( z )**( 2
     ) * ( omega )**( 2 ) + ( -2 * z * zd * ( omega )**( 2 ) + ( zd )**( 2 )
     * ( omega )**( 2 ) ) ) ) ) ) ) ) ) ) * np.cos( ( ( ( ( x + -1 * xd ) )**(
     2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) ) ) )**(
     1/2 ) * omega ) + -3 * ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 *
     yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega * np.sin(
     ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z +
     -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega ) ) + np.sin( phidip ) * ( ( 2
     * ( y )**( 2 ) + ( -4 * y * yd + ( 2 * ( yd )**( 2 ) + ( -1 * ( z )**(
     2 ) + ( 2 * z * zd + ( -1 * ( zd )**( 2 ) + ( ( x )**( 4 ) * ( omega )**(
     2 ) + ( -4 * ( x )**( 3 ) * xd * ( omega )**( 2 ) + ( ( xd )**( 4 ) * (
     omega )**( 2 ) + ( ( y )**( 2 ) * ( z )**( 2 ) * ( omega )**( 2 ) + ( -2
     * y * yd * ( z )**( 2 ) * ( omega )**( 2 ) + ( ( yd )**( 2 ) * ( z )**(
     2 ) * ( omega )**( 2 ) + ( ( z )**( 4 ) * ( omega )**( 2 ) + ( -2 * ( y
     )**( 2 ) * z * zd * ( omega )**( 2 ) + ( 4 * y * yd * z * zd * ( omega
     )**( 2 ) + ( -2 * ( yd )**( 2 ) * z * zd * ( omega )**( 2 ) + ( -4 * (
     z )**( 3 ) * zd * ( omega )**( 2 ) + ( ( y )**( 2 ) * ( zd )**( 2 ) * (
     omega )**( 2 ) + ( -2 * y * yd * ( zd )**( 2 ) * ( omega )**( 2 ) + ( (
     yd )**( 2 ) * ( zd )**( 2 ) * ( omega )**( 2 ) + ( 6 * ( z )**( 2 ) * (
     zd )**( 2 ) * ( omega )**( 2 ) + ( -4 * z * ( zd )**( 3 ) * ( omega )**(
     2 ) + ( ( zd )**( 4 ) * ( omega )**( 2 ) + ( ( xd )**( 2 ) * ( -1 + ( (
     y )**( 2 ) * ( omega )**( 2 ) + ( -2 * y * yd * ( omega )**( 2 ) + ( (
     yd )**( 2 ) * ( omega )**( 2 ) + ( 2 * ( z )**( 2 ) * ( omega )**( 2 )
     + ( -4 * z * zd * ( omega )**( 2 ) + 2 * ( zd )**( 2 ) * ( omega )**( 2
     ) ) ) ) ) ) ) + ( -2 * x * xd * ( -1 + ( 2 * ( xd )**( 2 ) * ( omega )**(
     2 ) + ( ( y )**( 2 ) * ( omega )**( 2 ) + ( -2 * y * yd * ( omega )**(
     2 ) + ( ( yd )**( 2 ) * ( omega )**( 2 ) + ( 2 * ( z )**( 2 ) * ( omega
     )**( 2 ) + ( -4 * z * zd * ( omega )**( 2 ) + 2 * ( zd )**( 2 ) * ( omega
     )**( 2 ) ) ) ) ) ) ) ) + ( x )**( 2 ) * ( -1 + ( 6 * ( xd )**( 2 ) * (
     omega )**( 2 ) + ( ( y )**( 2 ) * ( omega )**( 2 ) + ( -2 * y * yd * (
     omega )**( 2 ) + ( ( yd )**( 2 ) * ( omega )**( 2 ) + ( 2 * ( z )**( 2
     ) * ( omega )**( 2 ) + ( -4 * z * zd * ( omega )**( 2 ) + 2 * ( zd )**(
     2 ) * ( omega )**( 2 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
     ) ) ) ) ) ) ) ) * np.cos( ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1
     * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega ) +
     -1 * ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + (
     ( z + -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) * ( ( x )**( 2 ) + ( -2 * x * xd
     + ( ( xd )**( 2 ) + ( -2 * ( y )**( 2 ) + ( 4 * y * yd + ( -2 * ( yd )**(
     2 ) + ( ( z )**( 2 ) + ( -2 * z * zd + ( zd )**( 2 ) ) ) ) ) ) ) ) ) *
     omega * np.sin( ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**(
     2 ) + ( ( z + -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega ) ) ) ))
    return fieldvalue

def Edipz(x, xd, y, yd, z, zd, thetadip, phidip, omega):
    '''
    z-component of the electric field at position (x, y, z) of an electric
     dipole with frequency omega and located at position (xd, yd, zd) including
     near-field components.
    '''
    fieldvalue = (( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z
     + -1 * zd ) )**( 2 ) ) ) )**( -5/2 ) * ( -1 * ( z + -1 * zd ) * np.sin(
     thetadip ) * ( ( x + -1 * xd ) * np.cos( phidip ) + ( y + -1 * yd ) * np.sin(
     phidip ) ) * ( ( -3 + ( ( x )**( 2 ) * ( omega )**( 2 ) + ( -2 * x * xd *
     ( omega )**( 2 ) + ( ( xd )**( 2 ) * ( omega )**( 2 ) + ( ( y )**( 2 )
     * ( omega )**( 2 ) + ( -2 * y * yd * ( omega )**( 2 ) + ( ( yd )**( 2 )
     * ( omega )**( 2 ) + ( ( z )**( 2 ) * ( omega )**( 2 ) + ( -2 * z * zd
     * ( omega )**( 2 ) + ( zd )**( 2 ) * ( omega )**( 2 ) ) ) ) ) ) ) ) ) )
     * np.cos( ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 )
     + ( ( z + -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega ) + -3 * ( ( ( ( x
     + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd )
     )**( 2 ) ) ) )**( 1/2 ) * omega * np.sin( ( ( ( ( x + -1 * xd ) )**( 2
     ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) ) ) )**(
     1/2 ) * omega ) ) + np.cos( thetadip ) * ( ( -1 * ( y )**( 2 ) + ( 2 *
     y * yd + ( -1 * ( yd )**( 2 ) + ( 2 * ( z )**( 2 ) + ( -4 * z * zd + (
     2 * ( zd )**( 2 ) + ( ( x )**( 4 ) * ( omega )**( 2 ) + ( -4 * ( x )**(
     3 ) * xd * ( omega )**( 2 ) + ( ( xd )**( 4 ) * ( omega )**( 2 ) + ( (
     y )**( 4 ) * ( omega )**( 2 ) + ( -4 * ( y )**( 3 ) * yd * ( omega )**(
     2 ) + ( 6 * ( y )**( 2 ) * ( yd )**( 2 ) * ( omega )**( 2 ) + ( -4 * y
     * ( yd )**( 3 ) * ( omega )**( 2 ) + ( ( yd )**( 4 ) * ( omega )**( 2 )
     + ( ( y )**( 2 ) * ( z )**( 2 ) * ( omega )**( 2 ) + ( -2 * y * yd * (
     z )**( 2 ) * ( omega )**( 2 ) + ( ( yd )**( 2 ) * ( z )**( 2 ) * ( omega
     )**( 2 ) + ( -2 * ( y )**( 2 ) * z * zd * ( omega )**( 2 ) + ( 4 * y *
     yd * z * zd * ( omega )**( 2 ) + ( -2 * ( yd )**( 2 ) * z * zd * ( omega
     )**( 2 ) + ( ( y )**( 2 ) * ( zd )**( 2 ) * ( omega )**( 2 ) + ( -2 * y
     * yd * ( zd )**( 2 ) * ( omega )**( 2 ) + ( ( yd )**( 2 ) * ( zd )**( 2
     ) * ( omega )**( 2 ) + ( ( xd )**( 2 ) * ( -1 + ( 2 * ( y )**( 2 ) * (
     omega )**( 2 ) + ( -4 * y * yd * ( omega )**( 2 ) + ( 2 * ( yd )**( 2 )
     * ( omega )**( 2 ) + ( ( z )**( 2 ) * ( omega )**( 2 ) + ( -2 * z * zd
     * ( omega )**( 2 ) + ( zd )**( 2 ) * ( omega )**( 2 ) ) ) ) ) ) ) + ( -2
     * x * xd * ( -1 + ( 2 * ( xd )**( 2 ) * ( omega )**( 2 ) + ( 2 * ( y )**(
     2 ) * ( omega )**( 2 ) + ( -4 * y * yd * ( omega )**( 2 ) + ( 2 * ( yd
     )**( 2 ) * ( omega )**( 2 ) + ( ( z )**( 2 ) * ( omega )**( 2 ) + ( -2
     * z * zd * ( omega )**( 2 ) + ( zd )**( 2 ) * ( omega )**( 2 ) ) ) ) )
     ) ) ) + ( x )**( 2 ) * ( -1 + ( 6 * ( xd )**( 2 ) * ( omega )**( 2 ) +
     ( 2 * ( y )**( 2 ) * ( omega )**( 2 ) + ( -4 * y * yd * ( omega )**( 2
     ) + ( 2 * ( yd )**( 2 ) * ( omega )**( 2 ) + ( ( z )**( 2 ) * ( omega )**(
     2 ) + ( -2 * z * zd * ( omega )**( 2 ) + ( zd )**( 2 ) * ( omega )**( 2
     ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) * np.cos(
     ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z +
     -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega ) + -1 * ( ( ( ( x + -1 * xd
     ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2 )
     ) ) )**( 1/2 ) * ( ( x )**( 2 ) + ( -2 * x * xd + ( ( xd )**( 2 ) + ( (
     y )**( 2 ) + ( -2 * y * yd + ( ( yd )**( 2 ) + ( -2 * ( z )**( 2 ) + (
     4 * z * zd + -2 * ( zd )**( 2 ) ) ) ) ) ) ) ) ) * omega * np.sin( ( ( (
     ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1 *
     zd ) )**( 2 ) ) ) )**( 1/2 ) * omega ) ) ))
    return fieldvalue

def Edipfarx(x, xd, y, yd, z, zd, thetadip, phidip, omega):
    '''
    x-component of the electric field at position (x, y, z) of an electric
     dipole with frequency omega and located at position (xd, yd, zd) in its
     radiation zone.
    '''
    fieldvalue = (-1 * ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + (
     ( z + -1 * zd ) )**( 2 ) ) ) )**( -3/2 ) * ( omega )**( 2 ) * np.cos( (
     ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1
     * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega ) * ( ( x + -1 * xd ) * ( z + -1
     * zd ) * np.cos( thetadip ) + np.sin( thetadip ) * ( -1 * ( ( y )**( 2
     ) + ( -2 * y * yd + ( ( yd )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) ) ) )
     * np.cos( phidip ) + ( x + -1 * xd ) * ( y + -1 * yd ) * np.sin( phidip ) )
     ))
    return fieldvalue

def Edipfary(x, xd, y, yd, z, zd, thetadip, phidip, omega):
    '''
    y-component of the electric field at position (x, y, z) of an electric
     dipole with frequency omega and located at position (xd, yd, zd) in its
     radiation zone.
    '''
    fieldvalue = (( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z
     + -1 * zd ) )**( 2 ) ) ) )**( -3/2 ) * ( omega )**( 2 ) * np.cos( ( ( (
     ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1 *
     zd ) )**( 2 ) ) ) )**( 1/2 ) * omega ) * ( -1 * ( y + -1 * yd ) * ( z +
     -1 * zd ) * np.cos( thetadip ) + np.sin( thetadip ) * ( -1 * ( x + -1 *
     xd ) * ( y + -1 * yd ) * np.cos( phidip ) + ( ( x )**( 2 ) + ( -2 * x * xd
     + ( ( xd )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) ) ) ) * np.sin( phidip ) )
     ))
    return fieldvalue

def Edipfarz(x, xd, y, yd, z, zd, thetadip, phidip, omega):
    '''
    z-component of the electric field at position (x, y, z) of an electric
     dipole with frequency omega and located at position (xd, yd, zd) in its
     radiation zone.
    '''
    fieldvalue = (( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z
     + -1 * zd ) )**( 2 ) ) ) )**( -3/2 ) * ( omega )**( 2 ) * np.cos( ( ( (
     ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1 *
     zd ) )**( 2 ) ) ) )**( 1/2 ) * omega ) * ( ( ( x )**( 2 ) + ( -2 * x *
     xd + ( ( xd )**( 2 ) + ( ( y + -1 * yd ) )**( 2 ) ) ) ) * np.cos( thetadip
     ) + -1 * ( z + -1 * zd ) * np.sin( thetadip ) * ( ( x + -1 * xd ) * np.cos(
     phidip ) + ( y + -1 * yd ) * np.sin( phidip ) ) ))
    return fieldvalue

def Bdipx(x, xd, y, yd, z, zd, thetadip, phidip, omega):
    '''
    x-component of the magnetic field at position (x, y, z) of an electric
     dipole with frequency omega and located at position (xd, yd, zd) including
     near-field components.
    '''
    fieldvalue = (( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z
     + -1 * zd ) )**( 2 ) ) ) )**( -3/2 ) * omega * ( ( y + -1 * yd ) * np.cos(
     thetadip ) + ( -1 * z + zd ) * np.sin( thetadip ) * np.sin( phidip ) ) *
     ( ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z
     + -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega * np.cos( ( ( ( ( x + -1 *
     xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2
     ) ) ) )**( 1/2 ) * omega ) + -1 * np.sin( ( ( ( ( x + -1 * xd ) )**( 2
     ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) ) ) )**(
     1/2 ) * omega ) ))
    return fieldvalue

def Bdipy(x, xd, y, yd, z, zd, thetadip, phidip, omega):
    '''
    y-component of the magnetic field at position (x, y, z) of an electric
     dipole with frequency omega and located at position (xd, yd, zd) including
     near-field components.
    '''
    fieldvalue = (-1 * ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + (
     ( z + -1 * zd ) )**( 2 ) ) ) )**( -3/2 ) * omega * ( ( x + -1 * xd ) *
     np.cos( thetadip ) + ( -1 * z + zd ) * np.cos( phidip ) * np.sin( thetadip
     ) ) * ( ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) +
     ( ( z + -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega * np.cos( ( ( ( ( x +
     -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**(
     2 ) ) ) )**( 1/2 ) * omega ) + -1 * np.sin( ( ( ( ( x + -1 * xd ) )**(
     2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) ) ) )**(
     1/2 ) * omega ) ))
    return fieldvalue

def Bdipz(x, xd, y, yd, z, zd, thetadip, phidip, omega):
    '''
    z-component of the magnetic field at position (x, y, z) of an electric
     dipole with frequency omega and located at position (xd, yd, zd) including
     near-field components.
    '''
    fieldvalue = (( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z
     + -1 * zd ) )**( 2 ) ) ) )**( -3/2 ) * omega * np.sin( thetadip ) * ( (
     -1 * y + yd ) * np.cos( phidip ) + ( x + -1 * xd ) * np.sin( phidip ) ) * (
     ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z +
     -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega * np.cos( ( ( ( ( x + -1 * xd
     ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2 )
     ) ) )**( 1/2 ) * omega ) + -1 * np.sin( ( ( ( ( x + -1 * xd ) )**( 2 )
     + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) ) ) )**( 1/2
     ) * omega ) ))
    return fieldvalue

def Bdipfarx(x, xd, y, yd, z, zd, thetadip, phidip, omega):
    '''
    x-component of the magnetic field at position (x, y, z) of an electric
     dipole with frequency omega and located at position (xd, yd, zd) in its
     radiation zone.
    '''
    fieldvalue = (( ( ( x )**( 2 ) + ( -2 * x * xd + ( ( xd )**( 2 ) + ( ( y )**( 2 ) +
     ( -2 * y * yd + ( ( yd )**( 2 ) + ( ( z )**( 2 ) + ( -2 * z * zd + ( zd
     )**( 2 ) ) ) ) ) ) ) ) ) )**( -1 ) * ( omega )**( 2 ) * np.cos( ( ( ( (
     x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd
     ) )**( 2 ) ) ) )**( 1/2 ) * omega ) * ( ( y + -1 * yd ) * np.cos( thetadip
     ) + ( -1 * z + zd ) * np.sin( thetadip ) * np.sin( phidip ) ))
    return fieldvalue

def Bdipfary(x, xd, y, yd, z, zd, thetadip, phidip, omega):
    '''
    y-component of the magnetic field at position (x, y, z) of an electric
     dipole with frequency omega and located at position (xd, yd, zd) in its
     radiation zone.
    '''
    fieldvalue = (-1 * ( ( ( x )**( 2 ) + ( -2 * x * xd + ( ( xd )**( 2 ) + ( ( y )**( 2
     ) + ( -2 * y * yd + ( ( yd )**( 2 ) + ( ( z )**( 2 ) + ( -2 * z * zd +
     ( zd )**( 2 ) ) ) ) ) ) ) ) ) )**( -1 ) * ( omega )**( 2 ) * np.cos( (
     ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1
     * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega ) * ( ( x + -1 * xd ) * np.cos(
     thetadip ) + ( -1 * z + zd ) * np.cos( phidip ) * np.sin( thetadip ) ))
    return fieldvalue

def Bdipfarz(x, xd, y, yd, z, zd, thetadip, phidip, omega):
    '''
    z-component of the magnetic field at position (x, y, z) of an electric
     dipole with frequency omega and located at position (xd, yd, zd) in its
     radiation zone.
    '''
    fieldvalue = (( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z
     + -1 * zd ) )**( 2 ) ) ) )**( -1 ) * ( omega )**( 2 ) * np.cos( ( ( ( (
     x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd
     ) )**( 2 ) ) ) )**( 1/2 ) * omega ) * np.sin( thetadip ) * ( ( -1 * y +
     yd ) * np.cos( phidip ) + ( x + -1 * xd ) * np.sin( phidip ) ))
    return fieldvalue

