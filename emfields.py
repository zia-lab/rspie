#!/usr/bin/env python3

# Code generated by rspie.nb: Dipole Radiation numpy Function Generator

import numpy as np

def Edipx(x, xd, y, yd, z, zd, thetadip, phidip, omega):
    '''
    x-component of the electric field at position (x, y, z) of an electric
     dipole with frequency omega and located at position (xd, yd, zd) including
     near-field components.
    '''
    fieldvalue = (( np.e )**( complex( 0,1 ) * ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y
     + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega
     ) * ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( (
     z + -1 * zd ) )**( 2 ) ) ) )**( -5/2 ) * ( -1 * ( ( ( x + -1 * xd ) )**(
     2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) ) ) * (
     omega )**( 2 ) * ( ( x + -1 * xd ) * ( z + -1 * zd ) * np.cos( thetadip
     ) + np.sin( thetadip ) * ( -1 * ( ( y )**( 2 ) + ( -2 * y * yd + ( ( yd
     )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) ) ) ) * np.cos( phidip ) + ( x + -1
     * xd ) * ( y + -1 * yd ) * np.sin( phidip ) ) ) + -1 * ( 1 + complex( 0,-1
     ) * ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( (
     z + -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega ) * ( ( ( ( x + -1 * xd )
     )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) )
     ) * np.cos( phidip ) * np.sin( thetadip ) + -3 * ( x + -1 * xd ) * ( ( z
     + -1 * zd ) * np.cos( thetadip ) + np.sin( thetadip ) * ( ( x + -1 * xd
     ) * np.cos( phidip ) + ( y + -1 * yd ) * np.sin( phidip ) ) ) ) ))
    return fieldvalue

def Edipy(x, xd, y, yd, z, zd, thetadip, phidip, omega):
    '''
    y-component of the electric field at position (x, y, z) of an electric
     dipole with frequency omega and located at position (xd, yd, zd) including
     near-field components.
    '''
    fieldvalue = (( np.e )**( complex( 0,1 ) * ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y
     + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega
     ) * ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( (
     z + -1 * zd ) )**( 2 ) ) ) )**( -5/2 ) * ( -1 * ( ( ( x + -1 * xd ) )**(
     2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) ) ) * (
     omega )**( 2 ) * ( ( y + -1 * yd ) * ( z + -1 * zd ) * np.cos( thetadip
     ) + np.sin( thetadip ) * ( ( x + -1 * xd ) * ( y + -1 * yd ) * np.cos(
     phidip ) + -1 * ( ( x )**( 2 ) + ( -2 * x * xd + ( ( xd )**( 2 ) + ( ( z
     + -1 * zd ) )**( 2 ) ) ) ) * np.sin( phidip ) ) ) + -1 * ( 1 + complex( 0,-1
     ) * ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( (
     z + -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega ) * ( ( ( ( x + -1 * xd )
     )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) )
     ) * np.sin( thetadip ) * np.sin( phidip ) + -3 * ( y + -1 * yd ) * ( ( z
     + -1 * zd ) * np.cos( thetadip ) + np.sin( thetadip ) * ( ( x + -1 * xd
     ) * np.cos( phidip ) + ( y + -1 * yd ) * np.sin( phidip ) ) ) ) ))
    return fieldvalue

def Edipz(x, xd, y, yd, z, zd, thetadip, phidip, omega):
    '''
    z-component of the electric field at position (x, y, z) of an electric
     dipole with frequency omega and located at position (xd, yd, zd) including
     near-field components.
    '''
    fieldvalue = (( np.e )**( complex( 0,1 ) * ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y
     + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega
     ) * ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( (
     z + -1 * zd ) )**( 2 ) ) ) )**( -5/2 ) * ( ( ( ( x + -1 * xd ) )**( 2 )
     + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) ) ) * ( omega
     )**( 2 ) * ( ( ( x )**( 2 ) + ( -2 * x * xd + ( ( xd )**( 2 ) + ( ( y +
     -1 * yd ) )**( 2 ) ) ) ) * np.cos( thetadip ) + -1 * ( z + -1 * zd ) *
     np.sin( thetadip ) * ( ( x + -1 * xd ) * np.cos( phidip ) + ( y + -1 * yd
     ) * np.sin( phidip ) ) ) + -1 * ( 1 + complex( 0,-1 ) * ( ( ( ( x + -1 *
     xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2
     ) ) ) )**( 1/2 ) * omega ) * ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y +
     -1 * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) ) ) * np.cos( thetadip
     ) + -3 * ( z + -1 * zd ) * ( ( z + -1 * zd ) * np.cos( thetadip ) + np.sin(
     thetadip ) * ( ( x + -1 * xd ) * np.cos( phidip ) + ( y + -1 * yd ) * np.sin(
     phidip ) ) ) ) ))
    return fieldvalue

def Edipfarx(x, xd, y, yd, z, zd, thetadip, phidip, omega):
    '''
    x-component of the electric field at position (x, y, z) of an electric
     dipole with frequency omega and located at position (xd, yd, zd) in its
     radiation zone.
    '''
    fieldvalue = (( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z
     + -1 * zd ) )**( 2 ) ) ) )**( -3/2 ) * ( omega )**( 2 ) * ( -1 * ( x +
     -1 * xd ) * ( z + -1 * zd ) * np.cos( thetadip ) + np.sin( thetadip ) *
     ( ( ( y )**( 2 ) + ( -2 * y * yd + ( ( yd )**( 2 ) + ( ( z + -1 * zd )
     )**( 2 ) ) ) ) * np.cos( phidip ) + -1 * ( x + -1 * xd ) * ( y + -1 * yd
     ) * np.sin( phidip ) ) ))
    return fieldvalue

def Edipfary(x, xd, y, yd, z, zd, thetadip, phidip, omega):
    '''
    y-component of the electric field at position (x, y, z) of an electric
     dipole with frequency omega and located at position (xd, yd, zd) in its
     radiation zone.
    '''
    fieldvalue = (( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z
     + -1 * zd ) )**( 2 ) ) ) )**( -3/2 ) * ( omega )**( 2 ) * ( -1 * ( y +
     -1 * yd ) * ( z + -1 * zd ) * np.cos( thetadip ) + np.sin( thetadip ) *
     ( -1 * ( x + -1 * xd ) * ( y + -1 * yd ) * np.cos( phidip ) + ( ( x )**(
     2 ) + ( -2 * x * xd + ( ( xd )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) ) )
     ) * np.sin( phidip ) ) ))
    return fieldvalue

def Edipfarz(x, xd, y, yd, z, zd, thetadip, phidip, omega):
    '''
    z-component of the electric field at position (x, y, z) of an electric
     dipole with frequency omega and located at position (xd, yd, zd) in its
     radiation zone.
    '''
    fieldvalue = (( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z
     + -1 * zd ) )**( 2 ) ) ) )**( -3/2 ) * ( omega )**( 2 ) * ( ( ( x )**(
     2 ) + ( -2 * x * xd + ( ( xd )**( 2 ) + ( ( y + -1 * yd ) )**( 2 ) ) )
     ) * np.cos( thetadip ) + -1 * ( z + -1 * zd ) * np.sin( thetadip ) * (
     ( x + -1 * xd ) * np.cos( phidip ) + ( y + -1 * yd ) * np.sin( phidip ) ) ))
    return fieldvalue

def Bdipx(x, xd, y, yd, z, zd, thetadip, phidip, omega):
    '''
    x-component of the magnetic field at position (x, y, z) of an electric
     dipole with frequency omega and located at position (xd, yd, zd) including
     near-field components.
    '''
    fieldvalue = (( np.e )**( complex( 0,1 ) * ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y
     + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega
     ) * ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( (
     z + -1 * zd ) )**( 2 ) ) ) )**( -3/2 ) * omega * ( complex( 0,1 ) + ( (
     ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1
     * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega ) * ( ( y + -1 * yd ) * np.cos(
     thetadip ) + ( -1 * z + zd ) * np.sin( thetadip ) * np.sin( phidip ) ))
    return fieldvalue

def Bdipy(x, xd, y, yd, z, zd, thetadip, phidip, omega):
    '''
    y-component of the magnetic field at position (x, y, z) of an electric
     dipole with frequency omega and located at position (xd, yd, zd) including
     near-field components.
    '''
    fieldvalue = (-1 * ( np.e )**( complex( 0,1 ) * ( ( ( ( x + -1 * xd ) )**( 2 ) + ( (
     ( y + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) *
     omega ) * ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 )
     + ( ( z + -1 * zd ) )**( 2 ) ) ) )**( -3/2 ) * omega * ( complex( 0,1 )
     + ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z
     + -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega ) * ( ( x + -1 * xd ) * np.cos(
     thetadip ) + ( -1 * z + zd ) * np.cos( phidip ) * np.sin( thetadip ) ))
    return fieldvalue

def Bdipz(x, xd, y, yd, z, zd, thetadip, phidip, omega):
    '''
    z-component of the magnetic field at position (x, y, z) of an electric
     dipole with frequency omega and located at position (xd, yd, zd) including
     near-field components.
    '''
    fieldvalue = (( np.e )**( complex( 0,1 ) * ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y
     + -1 * yd ) )**( 2 ) + ( ( z + -1 * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega
     ) * ( ( ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( (
     z + -1 * zd ) )**( 2 ) ) ) )**( -3/2 ) * omega * ( complex( 0,1 ) + ( (
     ( ( x + -1 * xd ) )**( 2 ) + ( ( ( y + -1 * yd ) )**( 2 ) + ( ( z + -1
     * zd ) )**( 2 ) ) ) )**( 1/2 ) * omega ) * np.sin( thetadip ) * ( ( -1
     * y + yd ) * np.cos( phidip ) + ( x + -1 * xd ) * np.sin( phidip ) ))
    return fieldvalue

def Bdipfarx(x, xd, y, yd, z, zd, thetadip, phidip, omega):
    '''
    x-component of the magnetic field at position (x, y, z) of an electric
     dipole with frequency omega and located at position (xd, yd, zd) in its
     radiation zone.
    '''
    fieldvalue = (( ( ( x )**( 2 ) + ( -2 * x * xd + ( ( xd )**( 2 ) + ( ( y )**( 2 ) +
     ( -2 * y * yd + ( ( yd )**( 2 ) + ( ( z )**( 2 ) + ( -2 * z * zd + ( zd
     )**( 2 ) ) ) ) ) ) ) ) ) )**( -1 ) * ( omega )**( 2 ) * ( ( y + -1 * yd
     ) * np.cos( thetadip ) + ( -1 * z + zd ) * np.sin( thetadip ) * np.sin(
     phidip ) ))
    return fieldvalue

def Bdipfary(x, xd, y, yd, z, zd, thetadip, phidip, omega):
    '''
    y-component of the magnetic field at position (x, y, z) of an electric
     dipole with frequency omega and located at position (xd, yd, zd) in its
     radiation zone.
    '''
    fieldvalue = (-1 * ( ( ( x )**( 2 ) + ( -2 * x * xd + ( ( xd )**( 2 ) + ( ( y )**( 2
     ) + ( -2 * y * yd + ( ( yd )**( 2 ) + ( ( z )**( 2 ) + ( -2 * z * zd +
     ( zd )**( 2 ) ) ) ) ) ) ) ) ) )**( -1 ) * ( omega )**( 2 ) * ( ( x + -1
     * xd ) * np.cos( thetadip ) + ( -1 * z + zd ) * np.cos( phidip ) * np.sin(
     thetadip ) ))
    return fieldvalue

def Bdipfarz(x, xd, y, yd, z, zd, thetadip, phidip, omega):
    '''
    z-component of the magnetic field at position (x, y, z) of an electric
     dipole with frequency omega and located at position (xd, yd, zd) in its
     radiation zone.
    '''
    fieldvalue = (( ( ( x )**( 2 ) + ( -2 * x * xd + ( ( xd )**( 2 ) + ( ( y )**( 2 ) +
     ( -2 * y * yd + ( ( yd )**( 2 ) + ( ( z )**( 2 ) + ( -2 * z * zd + ( zd
     )**( 2 ) ) ) ) ) ) ) ) ) )**( -1 ) * ( omega )**( 2 ) * np.sin( thetadip
     ) * ( ( -1 * y + yd ) * np.cos( phidip ) + ( x + -1 * xd ) * np.sin( phidip
     ) ))
    return fieldvalue

